permissions:
  contents: read
  actions: write


  actions: writeon:
  workflow_call: {}
  repository_dispatch:
    types: [manual-backtest]
  schedule:
    - cron: "30 2 * * *"

jobs:
  backtest_and_gate:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      LOOKBACK_DAYS: "60"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Preflight logs exist
        run: |
          set -e
          DATE=$(date -u +%Y%m%d)
          for TF in M15 H1 H4; do
            FILE="papertrade/logs/${DATE}_USDJPY_${TF}.csv"
            [[ -f "$FILE" ]] || echo "::warning::missing ${FILE}"
          done

      - name: Generate metrics from logs (last ${{ env.LOOKBACK_DAYS }} days, deterministic)
        env:
          RISK_CFG: ${{ secrets.RISK_CFG }}
          INITIAL_EQUITY: "50000"
        run: |
          set -e
          rm -f metrics/metrics.csv || true

          build_list () {
            TF="$1"; FILES=""
            for i in $(seq 0 $((LOOKBACK_DAYS-1))); do
              D=$(date -u -d "$i day ago" +%Y%m%d)
              F="papertrade/logs/${D}_USDJPY_${TF}.csv"
              [[ -f "$F" ]] && FILES="$FILES $F"
            done
            echo "$FILES"
          }

          M15_FILES=$(build_list M15)
          H1_FILES=$(build_list H1)
          H4_FILES=$(build_list H4)

          DATE=$(date -u +%Y%m%d)
          HAVE_LOGS=false
          if [ -n "$M15_FILES" ] || [ -n "$H1_FILES" ] || [ -n "$H4_FILES" ]; then
            HAVE_LOGS=true
          fi
          echo "LOGS_PRESENT=$HAVE_LOGS" >> "$GITHUB_ENV"

          python scripts/paper_metrics.py --root metrics --case ${DATE}_USDJPY_M15 --seed 1729 ${M15_FILES:+--logs $M15_FILES}
          python scripts/paper_metrics.py --root metrics --case ${DATE}_USDJPY_H1  --seed 1730 ${H1_FILES:+--logs $H1_FILES}
          python scripts/paper_metrics.py --root metrics --case ${DATE}_USDJPY_H4  --seed 1731 ${H4_FILES:+--logs $H4_FILES}
          cat metrics/metrics.csv

      - name: Determinism self-check (replay)
        run: |
          set -e
          if [ "${LOGS_PRESENT}" != "true" ]; then
            echo "Skip determinism check: no logs available."
            exit 0
          fi
          rm -rf metrics_replay || true

          build_list () {
            TF="$1"; FILES=""
            for i in $(seq 0 $((LOOKBACK_DAYS-1))); do
              D=$(date -u -d "$i day ago" +%Y%m%d)
              F="papertrade/logs/${D}_USDJPY_${TF}.csv"
              [[ -f "$F" ]] && FILES="$FILES $F"
            done
            echo "$FILES"
          }

          M15_FILES=$(build_list M15)
          H1_FILES=$(build_list H1)
          H4_FILES=$(build_list H4)
          DATE=$(date -u +%Y%m%d)
          python scripts/paper_metrics.py --root metrics_replay --case ${DATE}_USDJPY_M15 --seed 1729 ${M15_FILES:+--logs $M15_FILES}
          python scripts/paper_metrics.py --root metrics_replay --case ${DATE}_USDJPY_H1  --seed 1730 ${H1_FILES:+--logs $H1_FILES}
          python scripts/paper_metrics.py --root metrics_replay --case ${DATE}_USDJPY_H4  --seed 1731 ${H4_FILES:+--logs $H4_FILES}

          H1=$(sha256sum metrics/metrics.csv | awk '{print $1}')
          H2=$(sha256sum metrics_replay/metrics.csv | awk '{print $1}')
          echo "hash(original)=$H1  hash(replay)=$H2"
          if [ "$H1" != "$H2" ]; then
            echo "::warning::determinism check failed: metrics.csv differs on replay"
            diff -u metrics/metrics.csv metrics_replay/metrics.csv || true
          else
            echo "DETERMINISM: OK"
          fi

      - name: Gate (risk-aware thresholds)
        run: |
          if [ "${LOGS_PRESENT}" != "true" ]; then
            echo "No logs present; emitting stub gate report."
            mkdir -p metrics
            cat > metrics/gate_report.json <<'EOF'
            {
              "generated_at": "stub",
              "overall_pass": true,
              "cases": []
            }
EOF
            EOF
            printf "case,status\n" > metrics/gate_report.csv
            printf "# Gate Report (Stub)\n\nNo gate evaluation performed.\n" > metrics/gate_report.md
          else
            python scripts/aggregate_gate.py \
              --logs-dir papertrade/logs \
              --output-dir metrics \
              --lookback-days $LOOKBACK_DAYS \
              --as-of $(date -u +%Y%m%d) \
              --min-net 0 \
              --min-win 0.45 \
              --max-dd 0.20 \
              --min-trades 30 \
              --kill-switch
          fi

      - name: Generate Gate report (markdown)
        if: always()
        run: |
          python scripts/metrics_report.py \
            --metrics-csv metrics/metrics.csv \
            --gate-report metrics/gate_report.json \
            --output-dir metrics \\
            --markdown-name report.md \\
            --json-name report.json

      - name: Post job summary
        if: always()
        run: |
          echo "## Gate Report" >> "$GITHUB_STEP_SUMMARY"
          if [ -f metrics/report.md ]; then
            cat metrics/report.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "**report.md missing**" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Open or update Gate failure issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.existsSync('metrics/report.md')
              ? fs.readFileSync('metrics/report.md','utf8')
              : '**report.md missing**';
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const title = `Gate failed: run #${context.runNumber}`;
            const {data: issues} = await github.rest.issues.listForRepo({
              owner: context.repo.owner, repo: context.repo.repo, labels: 'gate-failure', state: 'open'
            });
            if (issues.length) {
              await github.rest.issues.createComment({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: issues[0].number,
                body: `Run: ${runUrl}\n\n` + body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner, repo: context.repo.repo,
                title, body: `Run: ${runUrl}\n\n` + body, labels: ['gate-failure']
              });
            }

      - name: Prepare metrics artifact bundle
        if: always()
        run: |
          set -e
          rm -rf metrics_artifact
          mkdir -p metrics_artifact/metrics
          cp metrics/metrics.csv metrics_artifact/metrics/
          cp metrics/report.md metrics_artifact/metrics/
          if [ -f metrics/pass_rate.txt ]; then
            cp metrics/pass_rate.txt metrics_artifact/metrics/
          fi
          if [ -f metrics/gate_report.json ]; then
            cp metrics/gate_report.json metrics_artifact/metrics/
          fi
          if [ -f metrics/gate_report.md ]; then
            cp metrics/gate_report.md metrics_artifact/metrics/
          fi
          if [ -f metrics/gate_report.csv ]; then
            cp metrics/gate_report.csv metrics_artifact/metrics/
          fi
          if [ -f metrics_replay/metrics.csv ]; then
            cp metrics_replay/metrics.csv metrics_artifact/metrics_replay.csv
          fi

            - name: Always archive metrics dir
        if: always()
        run: |
          set -e
          mkdir -p metrics
          # 最低限のCSVを用意（失敗時でも収集できるように）
          if [ ! -f metrics/metrics.csv ]; then
            printf "case,net,win,dd,trades\nstub,0,0,0,0\n" > metrics/metrics.csv
          fi
          tar -czf metrics-pack.tgz metrics || true

            - name: Debug list before upload
        if: always()
        run: |
          set -e
          echo "== workspace =="
          pwd; ls -la
          echo "== metrics =="
          mkdir -p metrics || true
          ls -la metrics || true
          [ -f metrics/metrics.csv ] && head -n 5 metrics/metrics.csv || true
          [ -f metrics/report.md ] && head -n 20 metrics/report.md || true
          [ -f metrics-pack.tgz ] && echo "tgz size:" && wc -c metrics-pack.tgz || true
\n      - name: Workspace snapshot\n        if: always()        run: |\n          set -e\n          echo '== workspace snapshot =='\n          pwd; ls -la\n          du -sh * || true\n
      - name: Upload metrics artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: metrics-pack-${{ github.run_id }}\n          path: |\n            metrics/**\n            metrics-pack.tgz\n          if-no-files-found: warn
          path: |
            metrics/**
            metrics-pack.tgz
          if-no-files-found: warn
          retention-days: 30

      - name: Fallback upload (workspace snapshot)
        if: always()
        run: |
          set -e
          tar -czf workspace.tgz .

      - name: Upload fallback artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: workspace-${{ github.run_id }}\n          if-no-files-found: warn
          path: workspace.tgz
          if-no-files-found: warn
          retention-days: 7

      - name: Extract pass rate
        if: always()
        id: passrate
        run: |
          set -e
          RATE=""
          if [ -f metrics/pass_rate.txt ]; then
            RATE=$(cat metrics/pass_rate.txt)
          elif grep -E "\*\*pass_rate" metrics/report.md > /dev/null 2>&1; then
            RATE=$(grep -E "\*\*pass_rate" metrics/report.md | tail -n 1 | sed -E 's/.*= ([0-9.]+)%.*/\1/' )
            RATE=$(awk "BEGIN {print $RATE/100}")
          fi
          if [ -n "$RATE" ]; then
            printf 'rate=%.4f\n' "$RATE" >> "$GITHUB_OUTPUT"
            PCT=$(awk "BEGIN {printf \"%.2f\", $RATE*100}")
            echo "rate_pct=$PCT" >> "$GITHUB_OUTPUT"
          else
            echo "rate=" >> "$GITHUB_OUTPUT"
            echo "rate_pct=" >> "$GITHUB_OUTPUT"
          fi

      - name: Create failure issue
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          PASS_RATE: ${{ steps.passrate.outputs.rate_pct }}
        run: |
          set -e
          TITLE="[ci-backtest] Failure on run ${{ github.run_number }}"
          BODY="Run: $RUN_URL\\nStatus: ${{ job.status }}"
          if [ -n "$PASS_RATE" ]; then
            BODY="$BODY\\nPass rate: ${PASS_RATE}%"
          fi
          gh issue create --repo "$REPO" --title "$TITLE" --body "$BODY" || echo "Issue creation skipped"

      - name: Notify Discord
        if: always()
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          STATUS: ${{ job.status }}
          PASS_RATE: ${{ steps.passrate.outputs.rate_pct }}
        run: |
          if [ -n "$WEBHOOK" ]; then
            STATUS="${STATUS}"
            PR="${PASS_RATE}"
            if [ -z "$PR" ]; then
              PR=$(sed -n 's/.*pass_rate = \([0-9.]\+%\).*/\1/p' metrics/report.md 2>/dev/null | head -1)
            fi
            [ -z "$PR" ] && PR="n/a"
            MSG="ci-backtest: ${STATUS} (pass_rate=${PR})"
            curl -sS -X POST -H "Content-Type: application/json" \
                 -d "{\"content\":\"${MSG}\"}" "$WEBHOOK" || true >/dev/null
          else
            echo "DISCORD_WEBHOOK not set; skip notify."
          fi

  sidecar_fail:
    needs: backtest_and_gate
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Force failure (temporary sidecar)
        run: |
          echo "Sidecar job triggered intentionally."
          exit 1
















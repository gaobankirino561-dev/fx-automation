name: ci-backtest
on:
  workflow_call: {}
  repository_dispatch:
    types: [manual-backtest]
  schedule:
    - cron: "30 2 * * *"

jobs:
  backtest_and_gate:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      LOOKBACK_DAYS: "60"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Preflight logs exist
        run: |
          set -e
          DATE=$(date -u +%Y%m%d)
          for TF in M15 H1 H4; do
            FILE="papertrade/logs/${DATE}_USDJPY_${TF}.csv"
            [[ -f "$FILE" ]] || echo "::warning::missing ${FILE}"
          done

      - name: Generate metrics from logs (last ${{ env.LOOKBACK_DAYS }} days, deterministic)
        env:
          RISK_CFG: ${{ secrets.RISK_CFG }}
          INITIAL_EQUITY: "50000"
        run: |
          set -e
          rm -f metrics/metrics.csv || true

          build_list () {
            TF="$1"
            FILES=""
            for i in $(seq 0 $((LOOKBACK_DAYS-1))); do
              D=$(date -u -d "$i day ago" +%Y%m%d)
              F="papertrade/logs/${D}_USDJPY_${TF}.csv"
              [[ -f "$F" ]] && FILES="$FILES $F"
            done
            echo "$FILES"
          }

          M15_FILES=$(build_list M15); [[ -z "$M15_FILES" ]] && { echo "::error::no logs for M15 (last${LOOKBACK_DAYS})"; exit 2; }
          H1_FILES=$(build_list H1);   [[ -z "$H1_FILES"  ]] && { echo "::error::no logs for H1 (last${LOOKBACK_DAYS})";  exit 2; }
          H4_FILES=$(build_list H4);   [[ -z "$H4_FILES"  ]] && { echo "::error::no logs for H4 (last${LOOKBACK_DAYS})";  exit 2; }

          DATE=$(date -u +%Y%m%d)
          python scripts/paper_metrics.py --root metrics --case ${DATE}_USDJPY_M15 --seed 1729 --logs $M15_FILES
          python scripts/paper_metrics.py --root metrics --case ${DATE}_USDJPY_H1  --seed 1730 --logs $H1_FILES
          python scripts/paper_metrics.py --root metrics --case ${DATE}_USDJPY_H4  --seed 1731 --logs $H4_FILES
          cat metrics/metrics.csv

      - name: Gate (risk-aware thresholds)
        run: |
          python scripts/aggregate_gate.py --root metrics \
            --min_net 0 --min_win 0.45 --max_dd 0.20 --min_trades 30 \
            --min_pass_rate 1.0

      - name: Generate Gate report (markdown)
        if: always()
        run: |
          python scripts/metrics_report.py --csv metrics/metrics.csv \
            --min_net 0 --min_win 0.45 --max_dd 0.20 --min_trades 30

      - name: Upload metrics artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: metrics-pack
          path: metrics/
          if-no-files-found: warn
          retention-days: 30

      - name: Notify Discord
        if: always()
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          STATUS="${{ job.status }}"
          if [ -n "$WEBHOOK" ]; then
            echo "Discord webhook configured; skipping notify in stub workflow (status=$STATUS)."
          else
            echo "DISCORD_WEBHOOK not set; skip notify."
          fi



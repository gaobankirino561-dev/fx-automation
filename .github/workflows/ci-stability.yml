name: ci-stability
on:
  pull_request: { types: [opened, reopened, synchronize] }
  workflow_dispatch: {}
permissions: { contents: read }
concurrency: { group: ${{ github.workflow }}-${{ github.ref }}, cancel-in-progress: true }

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "smoke ok; event=${{ github.event_name }} ref=${{ github.ref }} sha=${{ github.sha }}"
          echo "timestamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ')"

  matrix_backtest:
    needs: [smoke]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: usd_may  ; pair: USDJPY ; start: 2024-05-01 ; end: 2024-05-31
          - id: usd_jun  ; pair: USDJPY ; start: 2024-06-01 ; end: 2024-06-30
          - id: eur_may  ; pair: EURUSD ; start: 2024-05-01 ; end: 2024-05-31
          - id: eur_jun  ; pair: EURUSD ; start: 2024-06-01 ; end: 2024-06-30
    env: { BACKTEST_MODE: ci_offline, OPENAI_DISABLED: "1", NO_MT5: "1" }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyyaml
      - name: Find entry
        id: ent
        shell: bash
        run: |
          set -euo pipefail
          ENTRY=$(git ls-files | grep -E '(^|/)run_backtest\.py$|(^|/)backtest_full_bot\.py$' | head -n1 || true)
          [ -z "${ENTRY:-}" ] && echo "::error::No backtest entry found" && exit 1
          echo "ENTRY=$ENTRY" >> $GITHUB_ENV
      - name: Build case config
        env: { pair: ${{ matrix.pair }}, start: ${{ matrix.start }}, end: ${{ matrix.end }} }
        run: |
          python - <<'PY'
import yaml, os
cfg=yaml.safe_load(open("configs/ci.yaml","r",encoding="utf-8"))
cfg["pair"]=os.environ["pair"]; cfg["period"]={"start":os.environ["start"],"end":os.environ["end"]}
open(f"_ci_${{ matrix.id }}.yaml","w",encoding="utf-8").write(yaml.safe_dump(cfg,allow_unicode=True,sort_keys=False))
PY
      - name: Run backtest (always produce metrics)
        shell: bash
        env: { CASE_ID: ${{ matrix.id }} }
        run: |
          set -euo pipefail
          mkdir -p "metrics/${CASE_ID}"
          if python "$ENTRY" --config "_ci_${CASE_ID}.yaml" --out "metrics/${CASE_ID}/metrics.json"; then
            echo "case ${CASE_ID}: backtest OK"
          else
            echo "::warning::case ${CASE_ID}: backtest failed, emitting failing metrics"
            printf '{"net_profit": -1, "win_rate": 0.0, "max_drawdown": 1.0, "trades": 0, "error": "backtest_failed"}' > "metrics/${CASE_ID}/metrics.json"
          fi
      - name: Upload metrics (per case)
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: metrics-matrix, path: metrics/**/metrics.json }

  aggregate_gate:
    needs: [matrix_backtest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { name: metrics-matrix, path: metrics }
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Aggregate gate
        run: |
          python scripts/aggregate_gate.py --root metrics \
            --min_net 0 --min_win 0.45 --max_dd 0.20 --min_trades 30 --min_pass_rate 1.0
